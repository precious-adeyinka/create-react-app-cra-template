{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","App","characters","filter","character","i","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAEMA,G,MAAc,WACnB,OACC,+BACC,4BACC,oCACA,mCACA,0CAMEC,EAAY,SAAAC,GAChB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACL,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,eAMD,OAAO,+BAAQJ,IAcFU,EAXD,SAAAX,GAAU,IACfE,EAAmCF,EAAnCE,cAAeQ,EAAoBV,EAApBU,gBAEvB,OACC,+BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,cAAeA,EAAeQ,gBAAiBA,M,OCa9CE,E,2MA9CdC,aAAe,CACXN,KAAM,GACNC,IAAK,I,EAGTM,MAAQ,EAAKD,a,EAEbE,aAAe,SAAAC,GAAU,IAAD,EACDA,EAAMC,OAArBV,EADgB,EAChBA,KAAMW,EADU,EACVA,MAEb,EAAKC,SAAL,eACEZ,EAAOW,K,EAIVE,WAAa,WACZ,EAAKpB,MAAMqB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,wEAGT,IAAD,EACWS,KAAKR,MAAlBP,EADE,EACFA,KAAMC,EADJ,EACIA,IACb,OACC,8BACC,2BAAOe,QAAQ,QAAf,QACA,2BACCC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHP,MAAOX,EACPmB,SAAYJ,KAAKP,eAElB,2BAAOQ,QAAQ,OAAf,OACA,2BACCC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHP,MAAOV,EACPkB,SAAYJ,KAAKP,eAElB,2BAAOS,KAAK,SAASN,MAAM,SAAST,QAASa,KAAKF,kB,GAzCnCO,aCkCJC,E,2MA9Bbd,MAAQ,CACNe,WAAY,I,EAGdnB,gBAAkB,SAAAL,GAAU,IACnBwB,EAAc,EAAKf,MAAnBe,WAEP,EAAKV,SAAS,CACZU,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM3B,Q,EAKnBgB,aAAe,SAAAU,GACb,EAAKZ,SAAS,CACZU,WAAW,GAAD,mBAAM,EAAKf,MAAMe,YAAjB,CAA6BE,O,wEAKzC,OACE,yBAAKE,UAAU,aACb,kBAAC,EAAD,CAAO/B,cAAeoB,KAAKR,MAAMe,WAAYnB,gBAAiBY,KAAKZ,kBACnE,kBAAC,EAAD,CAAMW,aAAcC,KAAKD,oB,GAzBfM,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7dab785e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TableHeader = ()=> {\r\n\treturn (\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>Name</td>\r\n\t\t\t\t<td>Job</td>\r\n\t\t\t\t<td>Action</td>\r\n\t\t\t</tr>\r\n\t\t</thead>\r\n\t);\r\n};\r\n\r\nconst TableBody = props => {\r\n  const rows = props.characterData.map((row, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{row.name}</td>\r\n        <td>{row.job}</td>\r\n        <td>\r\n\t\t\t<button onClick={() => props.removeCharacter(index)}>Delete</button>\r\n\t\t</td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return <tbody>{rows}</tbody>\r\n}\r\n\r\nconst Table = props => {\r\n\tconst { characterData, removeCharacter } = props;\r\n\r\n\treturn (\r\n\t\t<table>\r\n\t\t\t<TableHeader />\r\n\t\t\t<TableBody characterData={characterData} removeCharacter={removeCharacter} />\r\n\t\t</table>\r\n\t)\r\n}\r\n\r\nexport default Table;","import React, {Component} from \"react\";\r\n\r\nclass Form extends Component {\r\n\tinitialState = {\r\n    \tname: '',\r\n    \tjob: ''\r\n    }\r\n\r\n\tstate = this.initialState;\r\n\r\n\thandleChange = event => {\r\n\t\tconst {name, value} = event.target;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t})\r\n\t}\r\n\r\n\tsubmitForm = () => {\r\n\t\tthis.props.handleSubmit(this.state)\r\n\t\tthis.setState(this.initialState)\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst {name, job} = this.state;\r\n\t\treturn (\r\n\t\t\t<form>\r\n\t\t\t\t<label htmlFor=\"name\">Name</label>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tname=\"name\" \r\n\t\t\t\t\tid=\"name\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange = {this.handleChange} />\r\n\r\n\t\t\t\t<label htmlFor=\"job\">job</label>\r\n\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tname=\"job\" \r\n\t\t\t\t\tid=\"job\"\r\n\t\t\t\t\tvalue={job}\r\n\t\t\t\t\tonChange = {this.handleChange} />\r\n\r\n\t\t\t\t<input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\nimport './App.css';\nimport Table from \"./Table\";\nimport Form from \"./Form\";\n\nclass App extends Component {\n  state = {\n    characters: []\n  }\n\n  removeCharacter = index => {\n    const {characters} = this.state;\n    \n    this.setState({\n      characters: characters.filter((character, i) =>{\n        return i !== index\n      })\n    })\n  }\n\n  handleSubmit = character => {\n    this.setState({\n      characters: [...this.state.characters, character]\n    })\n  }\n\n  render () {\n    return(\n      <div className=\"container\">\n        <Table characterData={this.state.characters} removeCharacter={this.removeCharacter} />\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}